export declare const ensureArray: <T>(thing: T | T[]) => T[];
export declare const toObject: (thing?: string[] | Record<string, boolean | string[]> | undefined) => Record<string, boolean | string[]> | undefined;
export declare const map: (val: number, x1: number, y1: number, x2?: number, y2?: number) => number;
export declare const chunk: <T>(array: T[], size: number) => T[][];
export declare const zip: <T>(...arrays: T[][]) => T[][];
export declare const toPair: <T>(stop: [T] | [T, T]) => [T | null, T];
export declare const toBins: <T, K>(stops: [T, K][]) => [[T | null, T | null], K][];
export declare const createElement: (tag: string, options?: {
    classes?: string | string[];
    styles?: Record<string, string>;
    attributes?: Record<string, string | number | boolean | null>;
    content?: string | HTMLElement | false | (string | HTMLElement | undefined | false)[];
    appendTo?: HTMLElement;
}) => HTMLElement;
declare type Metadata = {
    name?: string;
    unit?: string;
    labels?: Record<string, string | false>;
};
export declare const serializeLabel: <T>(value: T | T[], metadata?: Metadata | undefined) => string | false;
export {};
